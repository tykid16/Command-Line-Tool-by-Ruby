＊時刻(Time)クラス
ここでは標準ライブラリとして時刻クラス(Timeクラス)の使い方について確認していきます。

(1) Timeクラス
Timeクラスは時刻を扱うクラスです。現在の時刻を取得したり任意の時刻を設定したりする事が出来ます。

Timeクラスから作成されるTimeオブジェクトは起算時と呼ばれる時刻から現在までの経過した秒数を持っています。起算時は一般的に1970年1月1日午前0時です。経過秒数と言うのはこの起算時から現在まで何秒経過したかということです。

例えば今日の日付が1970年1月2日午前0時だった場合を考えて見ます。起算時から1日後の日時ですので60秒×60分×24時間で経過秒数は86,400秒となります。逆に経過秒数と起算時で計算すれば日時を計算することが出来ます。

Timeオブジェクトを作成するには「new」メソッドを使います。

Timeオブジェクトを格納する変数 = Time.new
作成されたTimeクラスのオブジェクトは作成した現在時刻が格納されています。

具体的には次のように記述します。

t = Time.new
また「new」メソッドと同じく「now」メソッドを使った場合も現在時刻を表すTimeオブジェクトを取得できます。

t = Time.now
どちらも同じですが、「new」メソッドはTimeクラスのオブジェクトを作成して初期値として現在時刻が設定されているというのに対して「now」メソッドの場合は現在時刻を表すTimeクラスのオブジェクトを作成します。その為、現在時刻を取得したいという場合であれば「now」メソッドを使った方が意味合いとしては正しいかと思います。

(2) 年月日などの時刻要素を取得する
Timeクラスが起算時からの経過秒数を保持していることはご説明しましたが、内部的に保持している経過秒数から年や月などの時刻を構成する各要素を取り出すことが出来ます。それぞれ別のメソッドが用意されています。

メソッド	取得できる時刻要素
sec	秒を整数で取得
min	分を整数で取得
hour	時を整数で取得
mday	日を整数で取得
day	mdayの別名
mon	月を整数で取得
month	monの別名
year	年を整数で取得
wday	曜日を0(日曜日)から6(土曜日)の整数で取得
yday	1月1日からの通算日を整数で取得
isdst	夏時間があるなら true
dst?	isdstの別名
zone	タイムゾーンを表す文字列で取得
具体的には次のように記述します。

t = Time.now
print(t.year, "年", t.month, "月", t.day, "日")

(3) 指定の日時のTimeオブジェクトを作成する

Timeクラスのオブジェクトは現在時刻だけではなく指定した日時を表すTimeオブジェクトを作成できます。Timeクラスで用意されている「local」メソッドを使います。

Time.local(year[, mon[, day[, hour[, min[, sec[, usec]]]]]])
Time.local(sec, min, hour, mday, mon, year, wday, yday, isdst, zone)
「local」メソッドを使った場合はローカルタイムのTimeクラスのオブジェクトを作成します。

引数が異なる2つのメソッドがあります。1番目のメソッドをの場合は少なくとも1つの引数を指定して下さい。省略された引数は取り得る最小の値に設定されます。

例えば年だけを2007年に指定した場合は、他の値は次の通りに設定されます。

Time.local(2007)

月  ： 1
日  ： 1
曜日： 1 (曜日は月と日の値から計算される)
時  ： 0
分  ： 0
秒  ： 0
また「local」メソッドの2番目の使い方を利用する場合は10個の引数を全て指定します。指定した引数の中でも「wday, yday, zone」の3つの値は設定しても意味が無く無視されます。この形式の引数の順序はTimeクラスの「to_a」メソッドを使ってTimeクラスの値を配列として取得する場合の並びと同じです。

「local」メソッドと同じことをするメソッドとして「mktime」メソッドが用意されています。

Time.mktime(year[, mon[, day[, hour[, min[, sec[, usec]]]]]])
Time.mktime(sec, min, hour, mday, mon, year, wday, yday, isdst, zone)
またローカルタイムでは無く、協定世界時のTimeクラスのオブジェクトを取得するには「gm」メソッド又は「utc」メソッドが用意されています。

Time.gm(year[, mon[, day[, hour[, min[, sec[, usec]]]]]])
Time.gm(sec, min, hour, mday, mon, year, wday, yday, isdst, zone)
Time.utc(year[, mon[, day[, hour[, min[, sec[, usec]]]]]])
Time.utc(sec, min, hour, mday, mon, year, wday, yday, isdst, zone)
引数の取り扱いに関しては「local」メソッドと同じです。

(4) 指定フォーマットで文字列に変換する
現在時刻や時刻を指定してTimeクラスのオブジェクトを作成した後で任意に指定したフォーマットで文字列として取得する方法を確認します。Timeクラスで用意されている「strftime」メソッドを使います。

変数 = Timeオブジェクト.strftime(format文字列)
引数として出力したい形式を表す文字列を指定します。フォーマット文字列には普通の文字列の他に以下のような特別な文字列を指定することが出来ます。

フォーマット文字列	出力形式
%A	曜日の名称(Sunday, Monday ... )
%a	曜日の省略名(Sun, Mon ... )
%B	月の名称(January, February ... )
%b	月の省略名(Jan, Feb ... )
%c	日付と時刻
%d	日(01-31)
%H	24時間制の時(00-23)
%I	12時間制の時(01-12)
%j	年中の通算日(001-366)
%M	分(00-59)
%m	月を表す数字(01-12)
%p	午前または午後(AM,PM)
%S	秒(00-60) (60はうるう秒)
%U	週を表す数。最初の日曜日が第1週の始まり(00-53)
%W	週を表す数。最初の月曜日が第1週の始まり(00-53)
%w	曜日を表す数。日曜日が0(0-6)
%X	時刻
%x	日付
%Y	西暦を表す数
%y	西暦の下2桁(00-99)
%Z	タイムゾーン
%%	%自身
例えば次のように使用します。

t = Time.now
str = t.strftime("現在時刻 %H時 %M分 %S秒")

