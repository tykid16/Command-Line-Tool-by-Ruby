＊時刻(Time)クラス
(5) 時刻要素を配列として取得する
現在時刻や時刻を指定してTimeクラスのオブジェクトを作成した後で年や月など時刻の各要素を配列として取得する方法を確認します。Timeクラスで用意されている「to_a」メソッドを使います。

配列変数 = Timeオブジェクト.to_a
Timeクラスのオブジェクトに対して「to_a」メソッドを実行すると時刻要素をそれぞれ要素とした配列を取得できます。配列に格納される時刻要素と順序は次の通りです。

フォーマット文字列	出力形式
sec	秒(整数で取得)
min	分(整数で取得)
hour	時(整数で取得)
mday	日(整数で取得)
mon	月(整数で取得)
year	年(整数で取得)
wday	曜日(整数で取得)
yday	年内通算日(整数で取得)
isdst	夏時間の有無(true or falseで取得)
zone	タイムゾーン(文字列で取得)
例えば次のように使用します。

t = Time.now
ary = t.to_a

(6) 起算時からの経過秒数を取得する
Timeクラスのオブジェクトは内部的には起算時である1970年1月1日午前0時からの経過秒数を保持しています。この値を必要に応じて年月日や時分秒などに換算して利用するのですが今回は経過秒数そのものを取得する方法を確認します。Timeクラスで用意されている「to_f」メソッドなどを使います。

変数 = Timeオブジェクト.to_f
変数 = Timeオブジェクト.to_i
変数 = Timeオブジェクト.tv_sec
「to_f」メソッドは起算時からの経過秒数を浮動小数点数で取得します。このメソッドの場合は1秒未満の値も取得できます。

「to_i」メソッド及び「tv_sec」メソッドの場合は起算時からの経過秒数を整数で取得します。このメソッドの場合は最小単位が秒となります。

例えば次のように使用します。

t = Time.now
ary = t.to_i
経過秒数からTimeクラスのオブジェクトを作成する
今まではTimeクラスのオブジェクトを作成する方法として現在時刻を取得するか年月日などを指定して作成していました。他の方法として経過秒数を指定してTimeクラスのオブジェクトを作成することが出来ます。Timeクラスで用意されている「at」メソッドを使います。

Time.at(time[, usec])
引数には経過秒数を表す整数又は浮動小数点数を指定します。

なお浮動小数点数でも指定できない細かい値は省略可能な2番目の引数で指定します。この場合は1番目の引数には整数の時刻を指定し、2番目の引数には整数の値を指定します。結果は「time + (usec/1000000)」が指定されたことになります。

例えば次のように使用します。

t = Time.at(6672736622)

(7) 時刻の加減算
 
Timeクラスのオブジェクトに対して加算や減算を行うことが出来ます。まずは秒単位での加算と減算を行います。

t = Time.now
t = t + 10
t = t - 8
Timeクラスのオブジェクトに対して「+」メソッドや「-」メソッドを使って数値を加算減算できます。数値の単位は秒です。上記の場合は10秒増加させた後で8秒減少させています。

時刻と時刻の差分
また2つのTimeクラスのオブジェクトの差を求めることが出来ます。

t1 = Time.now
t2 = t1 + 10
sabun = t2 - t1
Timeクラスのオブジェクトに対して「-」メソッドを使って他のTimeクラスのオブジェクトを減算すると、2つのTimeクラスのオブジェクトの差を取得出来ます。単位は秒です。

(8) 協定世界時との時差を取得する
協定世界時とローカルタイムとの時差を取得します。Timeクラスで用意されている「utc_offset」を使います。

jisa = Time.now.utc_offset
現在のタイムゾーンがローカルタイムに設定されている場合に協定世界時との時差を数値で取得できます。

「utc_offset」メソッドと同じ機能を持つメソッドとして「gmt_offset」メソッドと「gmtoff」メソッドがあります。

＊日付(Date、DateTime)クラス
時刻クラスであるTimeクラスでも日付を扱うことは出来ますので一部重複している機能はあります。またDateTimeクラスは日付だけではなく時刻も扱えるようにしたクラスでDateクラスのサブクラスとなっています。

(1) Dateクラス
Dateクラスは組み込みクラスとはなっていない為、Dateクラスを使うにはまずプログラムファイルの中で次の一文を記述する必要があります。

require "date"
Dateクラスのオブジェクトを作成するには「new」メソッドを使います。

Date.new([year[, mon[, mday[, start]]]])
暦日付に基づくDateクラスのオブジェクトを作成します。引数は順に年、月、日となっています。月は1から12、日は1から31の範囲で指定します。

なお最後の引数はグレゴリオ暦をつかい始めた日をあらわすユリウス日を指定します。省略した場合は「ITALY (1582年10月15日)」が設定されますが取り合えず気にしないでいいかと思います。

実際の使い方は次のようになります。

require "date"

d = Date.new(2007, 5 ,30)
上記の場合は「2007年5月30日」と言う日付を表すDateクラスのオブジェクトを作成します。

本日の日付のDateオブジェクト作成する
年月日を指定してオブジェクトを作成する代わりに本日の日付を元にしたDateクラスのオブジェクトを作成することが出来ます。Dateクラスのオブジェクトを作成するには「today」メソッドを使います。

Date.today([start])
引数は「new」メソッドの最後の引数と同じくグレゴリオ暦をつかい始めた日をあらわすユリウス日を指定します。

実際の使い方は次のようになります。

require "date"

dt = Date.today

(2) 月末の日付でDateクラスのオブジェクトを作成する
「new」メソッドを使う場合、年月日の各値を指定しますが日に負の値を指定した場合はその月の最後の日から何日前の日付なのかを指定したことになります。例えば「-1」を指定した場合にはその月の月末の日となり「-2」を指定した場合には月末の前日となります。

実際の使い方は次のようになります。

require "date"

day = Date.new(2007, 5 , -1)
上記の場合は年と月が「2007年5月」であり、日は2007年5月の最後の日である31日となります。結果として「2007年5月31日」と言う日付を表すDateクラスのオブジェクトを作成します。

(3) 年月日などの日付要素を取得する
Dateクラスのオブジェクトを作成しましたら、そのオブジェクトから年や月など個々の日付要素を取り出すことができます。それぞれ別のメソッドが用意されています。

メソッド	取得できる日付要素
mday	日を整数で取得(1-31)
day	mdayの別名
mon	月を整数で取得(1-12)
month	monの別名
year	年を整数で取得
wday	曜日を0(日曜日)から6(土曜日)の整数で取得
yday	1月1日からの通算日を整数で取得(1-366)
cweek	暦週を整数で取得(1-53)
実際の使い方は次のようになります。

require "date"

d = Date.today
print(d.year, "年", d.month, "月", d.day, "日")

(4) 日付の加減算
Dateクラスのオブジェクトに対して加算や減算を行うことが出来ます。まずは日にち単位での加算と減算を行います。

require "date"

d = Date.today
afterDay = d + 1
beforeDay = d - 5
Dateクラスのオブジェクトに対して「+」メソッドや「-」メソッドを使って日にちを加算減算できます。上記の場合は現在の日付からDateクラスのオブジェクトを作成し、その後で1日後の日付と5日前の日付を取得しています。

次に月単位での加算と減算を行います。「<<」メソッドと「>>」メソッドを使います。

require "date"

d = Date.today
beforeMonth = d << 1
afterMonth = d >> 5
「<<」メソッドはその後に記述した数値ヶ月だけ前の日付を返します。「>>」メソッドはその後に記述した数値ヶ月だけ後の日付を返します。上記の場合は現在の日付からDateクラスのオブジェクトを作成し、その後で1ヶ月前の日付と5ヵ月後の日付を取得しています。

日付と日付の差分
2つのDateクラスのオブジェクトの差を求めることが出来ます。

require "date"

d1 = Date.today
d2 = Date.new(2007, 3 ,14)
sa = d1 - d2
Dateクラスのオブジェクトに対して「-」メソッドを使って他のDateクラスのオブジェクトを減算すると、2つのDateクラスのオブジェクトの差を取得出来ます。単位は日です。

(5) 指定フォーマットで文字列に変換する
Dateクラスのオブジェクトを作成した後で任意に指定したフォーマットで文字列として取得する方法を確認します。Dateクラスで用意されている「strftime」メソッドを使います。

Dateオブジェクト.strftime([format])
引数として出力したい形式を表す文字列を指定します。フォーマット文字列には普通の文字列の他に以下のような特別な文字列を指定することが出来ます。

フォーマット文字列	出力形式
%A	曜日の名称(Sunday, Monday ... )
%a	曜日の省略名(Sun, Mon ... )
%B	月の名称(January, February ... )
%b	月の省略名(Jan, Feb ... )
%c	日付と時刻
%d	日(01-31)
%H	24時間制の時(00-23)
%I	12時間制の時(01-12)
%j	年中の通算日(001-366)
%M	分(00-59)
%m	月を表す数字(01-12)
%p	午前または午後(AM,PM)
%S	秒(00-60) (60はうるう秒)
%U	週を表す数。最初の日曜日が第1週の始まり(00-53)
%W	週を表す数。最初の月曜日が第1週の始まり(00-53)
%w	曜日を表す数。日曜日が0(0-6)
%X	時刻
%x	日付
%Y	西暦を表す数
%y	西暦の下2桁(00-99)
%Z	タイムゾーン
%%	%自身
時刻に関するフォーマットを指定することも出来るのですが、Dateクラスのオブジェクトは時刻に関する情報は保持していないので全て0で表示されます。

実際の使い方は次のようになります。

require "date"

d = Date.today
str = d.strftime("%Y年 %m月 %d日")
上記の場合は現在日時を「xxxx年 xx月 xx日」と言うフォーマットで文字列として取得出来ます。

(6) DateTimeクラス
日付及び時刻を扱うDateTimeクラスについて見ていきます。

DateTimeクラスはDateクラスのサブクラスとなっています。Dateクラスが組み込みクラスとはなっていない為、DateTimeクラスを使うにはまずプログラムファイルの中で次の一文を記述する必要があります。

require "date"
DateTimeクラスのオブジェクトを作成するには「new」メソッドを使います。

Date.new([year[, mon[, mday[, hour[, min[, sec[, offset[, start]]]]]]]])
暦日付に基づくDateTimeクラスのオブジェクトを作成します。引数は順に年、月、日、時、分、秒、オフセット(時差)となっています。月は1から12、日は1から31、時は0から23、分は0から59、秒は0から59の範囲で指定します。

オフセットは協定世界時との時差を指定します。指定する数値の単位は日となっているため、日本の時差である9時間を表すには[9/24」日、すなわち「0.375」を指定します。オフセットを細かく設定出来る点がTimeクラスとDateTimeクラスの大きな違いとなります。

なお最後の引数はグレゴリオ暦をつかい始めた日をあらわすユリウス日を指定します。省略した場合は「ITALY (1582年10月15日)」が設定されますが取り合えず気にしないでいいかと思います。

実際の使い方は次のようになります。

require "date"

d = DateTime.new(2007, 5 ,30, 16, 20, 45, 0.375)
上記の場合は「2007年5月30日16時20分45秒」と言う日付と時刻を表すDateTimeクラスのオブジェクトを作成します。

現在の日付のDateTimeオブジェクト作成する
年月日を指定してオブジェクトを作成する代わりに現在の日付と時刻を元にしたDateTimeクラスのオブジェクトを作成することが出来ます。DateTimeクラスで用意されている「now」メソッドを使います。

DateTime.now([start])
引数は「new」メソッドの最後の引数と同じくグレゴリオ暦をつかい始めた日をあらわすユリウス日を指定します。

実際の使い方は次のようになります。

require "date"

dn = DateTime.now

(7) 時分秒などの時刻要素を取得する

DateTimeクラスのオブジェクトを作成しましたら、そのオブジェクトからDateクラスで用意されているメソッドを使って年や月などの日付要素の取得に加えて時や分など個々の時刻要素を取り出すことができます。時刻要素用にはそれぞれ別のメソッドがDateTimeクラスで用意されています。

メソッド	取得できる日付要素
hour	時間を整数で取得(0-23)
min	分を整数で取得(0-59)
sec	秒を整数で取得(0-59)
offset	時差を取得
zone	タイムゾーンを取得
実際の使い方は次のようになります。

実際の使い方は次のようになります。

require "date"

dn = DateTime.now
print(d.year, "年", d.month, "月", d.day, "日")
print(d.hour, "時", d.min, "分", d.sec, "秒", d.zone)
print("Offset:", d.offset)

(8) 時刻も含めて指定フォーマットで文字列に変換する
DateTimeクラスのオブジェクトに対してもDateクラスで用意されている「strftime」メソッドを使って指定のフォーマットで文字列に変換することが出来ます。

DateTimeオブジェクト.strftime([format])
引数として出力したい形式を表す文字列を指定します。フォーマット文字列には普通の文字列の他に以下のような特別な文字列を指定することが出来ます。

フォーマット文字列	出力形式
%A	曜日の名称(Sunday, Monday ... )
%a	曜日の省略名(Sun, Mon ... )
%B	月の名称(January, February ... )
%b	月の省略名(Jan, Feb ... )
%c	日付と時刻
%d	日(01-31)
%H	24時間制の時(00-23)
%I	12時間制の時(01-12)
%j	年中の通算日(001-366)
%M	分(00-59)
%m	月を表す数字(01-12)
%p	午前または午後(AM,PM)
%S	秒(00-60) (60はうるう秒)
%U	週を表す数。最初の日曜日が第1週の始まり(00-53)
%W	週を表す数。最初の月曜日が第1週の始まり(00-53)
%w	曜日を表す数。日曜日が0(0-6)
%X	時刻
%x	日付
%Y	西暦を表す数
%y	西暦の下2桁(00-99)
%Z	タイムゾーン
%%	%自身
Dateクラスの場合には時刻に関する情報がなかったため全て0で表示されていましたが、DateTimeクラスでは時刻に関する情報も保持しているため時刻に関する値も表示されます。

実際の使い方は次のようになります。

require "date"

d = DateTime.now
str = d.strftime("%Y年 %m月 %d日 %H時 %M分 %S秒")
上記の場合は現在日時を「xxxx年 xx月 xx日 xx時 xx分 xx秒」と言うフォーマットで文字列として取得出来ます。